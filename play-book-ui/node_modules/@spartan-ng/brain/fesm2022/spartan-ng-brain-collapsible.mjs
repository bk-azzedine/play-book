import * as i0 from '@angular/core';
import { signal, input, booleanAttribute, computed, ViewEncapsulation, ChangeDetectionStrategy, Component, inject, ElementRef, effect, untracked, Directive, NgModule } from '@angular/core';

let collapsibleContentIdSequence = 0;
class BrnCollapsibleComponent {
    state = signal('closed');
    contentId = signal(`brn-collapsible-content-${collapsibleContentIdSequence++}`);
    disabled = input(false, { transform: booleanAttribute });
    attrDisabled = computed(() => (this.disabled() ? true : undefined));
    toggle() {
        this.state.set(this.state() === 'closed' ? 'open' : 'closed');
    }
    /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.1", ngImport: i0, type: BrnCollapsibleComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
    /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "17.1.0", version: "19.2.1", type: BrnCollapsibleComponent, isStandalone: true, selector: "brn-collapsible", inputs: { disabled: { classPropertyName: "disabled", publicName: "disabled", isSignal: true, isRequired: false, transformFunction: null } }, host: { properties: { "attr.data-state": "state()", "attr.disabled": "attrDisabled()" } }, ngImport: i0, template: `
		<ng-content />
	`, isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.1", ngImport: i0, type: BrnCollapsibleComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'brn-collapsible',
                    standalone: true,
                    host: {
                        '[attr.data-state]': 'state()',
                        '[attr.disabled]': 'attrDisabled()',
                    },
                    template: `
		<ng-content />
	`,
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    encapsulation: ViewEncapsulation.None,
                }]
        }] });

class BrnCollapsibleContentComponent {
    _collapsible = inject(BrnCollapsibleComponent, { optional: true });
    _elementRef = inject(ElementRef);
    _height = signal(0);
    _width = signal(0);
    contentId = computed(() => this._collapsible?.contentId());
    state = computed(() => this._collapsible?.state?.() ?? 'closed');
    computedStyles = computed(() => {
        const height = this._height();
        const width = this._width();
        return {
            '--radix-collapsible-content-height': height ? `${height}px` : undefined,
            '--radix-collapsible-content-width': width ? `${width}px` : undefined,
        };
    });
    id = input();
    constructor() {
        if (!this._collapsible) {
            throw Error('Collapsible trigger directive can only be used inside a brn-collapsible element.');
        }
        effect(() => {
            const id = this.id();
            const collapsible = this._collapsible;
            if (!id || !collapsible)
                return;
            untracked(() => collapsible.contentId.set(id));
        });
    }
    ngAfterContentInit() {
        if (typeof this._elementRef.nativeElement.getBoundingClientRect !== 'function')
            return;
        const rect = this._elementRef.nativeElement.getBoundingClientRect();
        if (!rect)
            return;
        this._width.set(rect.width);
        this._height.set(rect.height);
    }
    /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.1", ngImport: i0, type: BrnCollapsibleContentComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
    /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "17.1.0", version: "19.2.1", type: BrnCollapsibleContentComponent, isStandalone: true, selector: "brn-collapsible-content", inputs: { id: { classPropertyName: "id", publicName: "id", isSignal: true, isRequired: false, transformFunction: null } }, host: { properties: { "hidden": "state() === \"closed\"", "attr.data-state": "state()", "style": "computedStyles()", "id": "contentId()" } }, ngImport: i0, template: `
		<ng-content />
	`, isInline: true });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.1", ngImport: i0, type: BrnCollapsibleContentComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'brn-collapsible-content',
                    standalone: true,
                    host: {
                        '[hidden]': 'state() === "closed"',
                        '[attr.data-state]': 'state()',
                        '[style]': 'computedStyles()',
                        '[id]': 'contentId()',
                    },
                    template: `
		<ng-content />
	`,
                }]
        }], ctorParameters: () => [] });

class BrnCollapsibleTriggerDirective {
    _collapsible = inject(BrnCollapsibleComponent, { optional: true });
    state = computed(() => this._collapsible?.state());
    disabled = computed(() => this._collapsible?.disabled?.());
    attrDisabled = computed(() => this._collapsible?.attrDisabled?.());
    ariaControls = computed(() => this._collapsible?.contentId());
    constructor() {
        if (!this._collapsible) {
            throw Error('Collapsible trigger directive can only be used inside a brn-collapsible element.');
        }
    }
    toggleCollapsible() {
        this._collapsible?.toggle();
    }
    /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.1", ngImport: i0, type: BrnCollapsibleTriggerDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive });
    /** @nocollapse */ static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "19.2.1", type: BrnCollapsibleTriggerDirective, isStandalone: true, selector: "button[brnCollapsibleTrigger]", host: { listeners: { "click": "toggleCollapsible()" }, properties: { "attr.data-state": "state()", "attr.disabled": "attrDisabled()", "attr.aria-expanded": "state() === \"open\"", "attr.aria-controls": "ariaControls()" } }, ngImport: i0 });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.1", ngImport: i0, type: BrnCollapsibleTriggerDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'button[brnCollapsibleTrigger]',
                    standalone: true,
                    host: {
                        '[attr.data-state]': 'state()',
                        '[attr.disabled]': 'attrDisabled()',
                        '[attr.aria-expanded]': 'state() === "open"',
                        '[attr.aria-controls]': 'ariaControls()',
                        '(click)': 'toggleCollapsible()',
                    },
                }]
        }], ctorParameters: () => [] });

const BrnCollapsibleImports = [
    BrnCollapsibleComponent,
    BrnCollapsibleTriggerDirective,
    BrnCollapsibleContentComponent,
];
class BrnCollapsibleModule {
    /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.1", ngImport: i0, type: BrnCollapsibleModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
    /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "19.2.1", ngImport: i0, type: BrnCollapsibleModule, imports: [BrnCollapsibleComponent,
            BrnCollapsibleTriggerDirective,
            BrnCollapsibleContentComponent], exports: [BrnCollapsibleComponent,
            BrnCollapsibleTriggerDirective,
            BrnCollapsibleContentComponent] });
    /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "19.2.1", ngImport: i0, type: BrnCollapsibleModule });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.1", ngImport: i0, type: BrnCollapsibleModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [...BrnCollapsibleImports],
                    exports: [...BrnCollapsibleImports],
                }]
        }] });

/**
 * Generated bundle index. Do not edit.
 */

export { BrnCollapsibleComponent, BrnCollapsibleContentComponent, BrnCollapsibleImports, BrnCollapsibleModule, BrnCollapsibleTriggerDirective };
//# sourceMappingURL=spartan-ng-brain-collapsible.mjs.map
