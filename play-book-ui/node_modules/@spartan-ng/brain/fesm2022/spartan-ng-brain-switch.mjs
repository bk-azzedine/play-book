import * as i0 from '@angular/core';
import { Component, forwardRef, inject, DestroyRef, Renderer2, PLATFORM_ID, ElementRef, ChangeDetectorRef, signal, model, input, booleanAttribute, viewChild, output, computed, effect, HostListener, ViewEncapsulation, ChangeDetectionStrategy, NgModule } from '@angular/core';
import { FocusMonitor } from '@angular/cdk/a11y';
import { isPlatformBrowser, NgStyle } from '@angular/common';
import { takeUntilDestroyed } from '@angular/core/rxjs-interop';
import { NG_VALUE_ACCESSOR } from '@angular/forms';

class BrnSwitchThumbComponent {
    /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.1", ngImport: i0, type: BrnSwitchThumbComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
    /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.1", type: BrnSwitchThumbComponent, isStandalone: true, selector: "brn-switch-thumb", ngImport: i0, template: '', isInline: true });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.1", ngImport: i0, type: BrnSwitchThumbComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'brn-switch-thumb',
                    imports: [],
                    template: '',
                }]
        }] });

const BRN_SWITCH_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef(() => BrnSwitchComponent),
    multi: true,
};
const CONTAINER_POST_FIX = '-switch';
class BrnSwitchComponent {
    _destroyRef = inject(DestroyRef);
    _renderer = inject(Renderer2);
    _isBrowser = isPlatformBrowser(inject(PLATFORM_ID));
    _elementRef = inject(ElementRef);
    _focusMonitor = inject(FocusMonitor);
    _cdr = inject(ChangeDetectorRef);
    focusVisible = signal(false);
    focused = signal(false);
    checked = model(false);
    /** Used to set the id on the underlying input element. */
    id = input(null);
    /** Used to set the name attribute on the underlying input element. */
    name = input(null);
    /** Used to set the aria-label attribute on the underlying input element. */
    ariaLabel = input(null, { alias: 'aria-label' });
    /** Used to set the aria-labelledby attribute on the underlying input element. */
    ariaLabelledby = input(null, { alias: 'aria-labelledby' });
    /** Used to set the aria-describedby attribute on the underlying input element. */
    ariaDescribedby = input(null, { alias: 'aria-describedby' });
    required = input(false, { transform: booleanAttribute });
    disabled = input(false, {
        transform: booleanAttribute,
    });
    // eslint-disable-next-line @typescript-eslint/no-empty-function
    _onChange = () => { };
    // eslint-disable-next-line @typescript-eslint/no-empty-function
    _onTouched = () => { };
    checkbox = viewChild.required('checkBox');
    changed = output();
    touched = output();
    state = computed(() => {
        const name = this.name();
        const id = this.id();
        return {
            disabled: signal(this.disabled()),
            name: name ? name + CONTAINER_POST_FIX : null,
            id: id ? id + CONTAINER_POST_FIX : null,
        };
    });
    constructor() {
        effect(() => {
            /** search for the label and set the disabled state */
            let parent = this._renderer.parentNode(this._elementRef.nativeElement);
            if (!parent)
                return;
            // if parent is a HLM-SWITCH, then we need to go up one more level to get the label
            if (parent?.tagName === 'HLM-SWITCH') {
                parent = this._renderer.parentNode(parent);
            }
            if (!parent)
                return;
            // check if parent is a label and assume it is for this checkbox
            if (parent?.tagName === 'LABEL') {
                this._renderer.setAttribute(parent, 'data-disabled', this.state().disabled() ? 'true' : 'false');
                return;
            }
            if (!this._isBrowser)
                return;
            const label = parent?.querySelector(`label[for="${this.forChild(this.state().id)}"]`);
            if (!label)
                return;
            this._renderer.setAttribute(label, 'data-disabled', this.state().disabled() ? 'true' : 'false');
        });
    }
    toggle(event) {
        if (this.state().disabled())
            return;
        event.preventDefault();
        this.checked.update((checked) => !checked);
        this._onChange(this.checked());
        this.changed.emit(this.checked());
    }
    ngAfterContentInit() {
        this._focusMonitor
            .monitor(this._elementRef, true)
            .pipe(takeUntilDestroyed(this._destroyRef))
            .subscribe((focusOrigin) => {
            if (focusOrigin)
                this.focused.set(true);
            if (focusOrigin === 'keyboard' || focusOrigin === 'program') {
                this.focusVisible.set(true);
                this._cdr.markForCheck();
            }
            if (!focusOrigin) {
                // When a focused element becomes disabled, the browser *immediately* fires a blur event.
                // Angular does not expect events to be raised during change detection, so any state
                // change (such as a form control's ng-touched) will cause a changed-after-checked error.
                // See https://github.com/angular/angular/issues/17793. To work around this, we defer
                // telling the form control it has been touched until the next tick.
                Promise.resolve().then(() => {
                    this.focusVisible.set(false);
                    this.focused.set(false);
                    this._onTouched();
                    this.touched.emit();
                    this._cdr.markForCheck();
                });
            }
        });
        if (!this.checkbox())
            return;
        this.checkbox().nativeElement.value = this.checked() ? 'on' : 'off';
        this.checkbox().nativeElement.dispatchEvent(new Event('change'));
    }
    ngOnDestroy() {
        this._focusMonitor.stopMonitoring(this._elementRef);
    }
    forChild(parentValue) {
        return parentValue ? parentValue.replace(CONTAINER_POST_FIX, '') : null;
    }
    writeValue(value) {
        this.checked.set(Boolean(value));
    }
    registerOnChange(fn) {
        this._onChange = fn;
    }
    registerOnTouched(fn) {
        this._onTouched = fn;
    }
    /** Implemented as a part of ControlValueAccessor. */
    setDisabledState(isDisabled) {
        this.state().disabled.set(isDisabled);
        this._cdr.markForCheck();
    }
    /**
     * If the space key is pressed, prevent the default action to stop the page from scrolling.
     */
    preventScrolling(event) {
        event.preventDefault();
    }
    /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.1", ngImport: i0, type: BrnSwitchComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
    /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "17.2.0", version: "19.2.1", type: BrnSwitchComponent, isStandalone: true, selector: "brn-switch", inputs: { checked: { classPropertyName: "checked", publicName: "checked", isSignal: true, isRequired: false, transformFunction: null }, id: { classPropertyName: "id", publicName: "id", isSignal: true, isRequired: false, transformFunction: null }, name: { classPropertyName: "name", publicName: "name", isSignal: true, isRequired: false, transformFunction: null }, ariaLabel: { classPropertyName: "ariaLabel", publicName: "aria-label", isSignal: true, isRequired: false, transformFunction: null }, ariaLabelledby: { classPropertyName: "ariaLabelledby", publicName: "aria-labelledby", isSignal: true, isRequired: false, transformFunction: null }, ariaDescribedby: { classPropertyName: "ariaDescribedby", publicName: "aria-describedby", isSignal: true, isRequired: false, transformFunction: null }, required: { classPropertyName: "required", publicName: "required", isSignal: true, isRequired: false, transformFunction: null }, disabled: { classPropertyName: "disabled", publicName: "disabled", isSignal: true, isRequired: false, transformFunction: null } }, outputs: { checked: "checkedChange", changed: "changed", touched: "touched" }, host: { attributes: { "tabindex": "0" }, listeners: { "click": "toggle($event)", "keyup.enter": "toggle($event)", "keyup.space": "toggle($event)", "keydown.space": "preventScrolling($event)" }, properties: { "attr.data-state": "checked() ? \"checked\" : \"unchecked\"", "attr.data-focus-visible": "focusVisible()", "attr.data-focus": "focused()", "attr.data-disabled": "state().disabled()", "attr.aria-labelledby": "null", "attr.aria-label": "null", "attr.aria-describedby": "null", "attr.id": "state().id", "attr.name": "state().name" } }, providers: [BRN_SWITCH_VALUE_ACCESSOR], viewQueries: [{ propertyName: "checkbox", first: true, predicate: ["checkBox"], descendants: true, isSignal: true }], ngImport: i0, template: `
		<input
			#checkBox
			tabindex="-1"
			type="checkbox"
			role="switch"
			[id]="forChild(state().id) ?? ''"
			[name]="forChild(state().name) ?? ''"
			[value]="checked() ? 'on' : 'off'"
			[ngStyle]="{
				position: 'absolute',
				width: '1px',
				height: '1px',
				padding: '0',
				margin: -'1px',
				overflow: 'hidden',
				clip: 'rect(0, 0, 0, 0)',
				whiteSpace: 'nowrap',
				borderWidth: '0',
			}"
			[checked]="checked()"
			[attr.aria-label]="ariaLabel()"
			[attr.aria-labelledby]="ariaLabelledby()"
			[attr.aria-describedby]="ariaDescribedby()"
			[attr.aria-required]="required() || null"
		/>
		<ng-content select="brn-switch-thumb" />
	`, isInline: true, dependencies: [{ kind: "directive", type: NgStyle, selector: "[ngStyle]", inputs: ["ngStyle"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.1", ngImport: i0, type: BrnSwitchComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'brn-switch',
                    imports: [NgStyle],
                    template: `
		<input
			#checkBox
			tabindex="-1"
			type="checkbox"
			role="switch"
			[id]="forChild(state().id) ?? ''"
			[name]="forChild(state().name) ?? ''"
			[value]="checked() ? 'on' : 'off'"
			[ngStyle]="{
				position: 'absolute',
				width: '1px',
				height: '1px',
				padding: '0',
				margin: -'1px',
				overflow: 'hidden',
				clip: 'rect(0, 0, 0, 0)',
				whiteSpace: 'nowrap',
				borderWidth: '0',
			}"
			[checked]="checked()"
			[attr.aria-label]="ariaLabel()"
			[attr.aria-labelledby]="ariaLabelledby()"
			[attr.aria-describedby]="ariaDescribedby()"
			[attr.aria-required]="required() || null"
		/>
		<ng-content select="brn-switch-thumb" />
	`,
                    host: {
                        tabindex: '0',
                        '[attr.data-state]': 'checked() ? "checked" : "unchecked"',
                        '[attr.data-focus-visible]': 'focusVisible()',
                        '[attr.data-focus]': 'focused()',
                        '[attr.data-disabled]': 'state().disabled()',
                        '[attr.aria-labelledby]': 'null',
                        '[attr.aria-label]': 'null',
                        '[attr.aria-describedby]': 'null',
                        '[attr.id]': 'state().id',
                        '[attr.name]': 'state().name',
                    },
                    providers: [BRN_SWITCH_VALUE_ACCESSOR],
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    encapsulation: ViewEncapsulation.None,
                }]
        }], ctorParameters: () => [], propDecorators: { toggle: [{
                type: HostListener,
                args: ['click', ['$event']]
            }, {
                type: HostListener,
                args: ['keyup.enter', ['$event']]
            }, {
                type: HostListener,
                args: ['keyup.space', ['$event']]
            }], preventScrolling: [{
                type: HostListener,
                args: ['keydown.space', ['$event']]
            }] } });

const BrnSwitchImports = [BrnSwitchComponent, BrnSwitchThumbComponent];
class BrnSwitchModule {
    /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.1", ngImport: i0, type: BrnSwitchModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
    /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "19.2.1", ngImport: i0, type: BrnSwitchModule, imports: [BrnSwitchComponent, BrnSwitchThumbComponent], exports: [BrnSwitchComponent, BrnSwitchThumbComponent] });
    /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "19.2.1", ngImport: i0, type: BrnSwitchModule });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.1", ngImport: i0, type: BrnSwitchModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [...BrnSwitchImports],
                    exports: [...BrnSwitchImports],
                }]
        }] });

/**
 * Generated bundle index. Do not edit.
 */

export { BRN_SWITCH_VALUE_ACCESSOR, BrnSwitchComponent, BrnSwitchImports, BrnSwitchModule, BrnSwitchThumbComponent };
//# sourceMappingURL=spartan-ng-brain-switch.mjs.map
